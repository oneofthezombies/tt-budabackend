.debuda-base:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  # Only run on merge requests
      changes:
        - dbd/**/*
    - when: never

.debuda-with-git:
  extends: .debuda-base
  before_script:
    ### setup the environment
    - git submodule update --init --recursive umd
    - git submodule update --init --recursive third_party/pybind11
    - git submodule update --init --recursive third_party/sfpi
    - git submodule update --init --recursive third_party/tt_llk_grayskull
    - git submodule update --init --recursive third_party/tt_llk_wormhole_b0

.debuda-wheel-test:
  extends: .debuda-base
  timeout: 5m
  stage: unit_tests
  variables:
    GIT_STRATEGY: none
    SIMPLE_DEBUDA_COMMANDS: 'h;brxy 0,0 0 64;d 0 netlist nocVirt;x'
    COMPLEX_DEBUDA_COMMANDS: 'op-map;d;d 0 netlist nocTr;q;q input0;q input0 16 16;eq;eq 1;dq;p 130000000000;brxy 0,0 0x0 32 --format i8;cdr;cdr 0,0;srs 0;srs 1;srs 2;ddb 0 32;ddb 0 16 hex8 0,0 0;ddb 0 16 hex16 1,1 0;pcir 0;wxy 0,0 0 0xabcd;full-dump;ha;s 0,0 4;t 1;t 1 --raw;d 0 netlist nocVirt;x'
    COMPLEX_NO_TILE_DEBUDA_COMMANDS: 'op-map;d;d 0 netlist nocTr;q;q input0;q input0 16 16;eq;eq 1;dq;p 130000000000;brxy 0,0 0x0 32 --format i8;cdr;cdr 0,0;srs 0;srs 1;srs 2;ddb 0 32;ddb 0 16 hex8 0,0 0;ddb 0 16 hex16 1,1 0;pcir 0;wxy 0,0 0 0xabcd;full-dump;ha;s 0,0 4;d 0 netlist nocVirt;x'
  needs:
    - debuda-build-wheel
  before_script:
    ### Make venv and activate it
    - python3 -m venv venv
    - source venv/bin/activate
    ### Install wheel
    - pip install build/debuda_wheel/*.whl
  script:
    ### Run some debuda commands
    - debuda --test --commands "$SIMPLE_DEBUDA_COMMANDS"

.debuda-build-tests-base:
  extends: .debuda-with-git
  timeout: 30m
  stage: build
  tags:
    - 8-core
  needs:
    - debuda-lint
  script:
    ### Strip some symbols
    - strip umd/device/bin/silicon/x86/create-ethernet-map
    ### Build
    - make -j$(nproc) build_hw verif/op_tests dbd dbd/pybind/unit_tests SKIP_UNIT_TESTS_RUN=1
  artifacts:
    when: always
    paths:
      - build_output.txt
      - build/bin/debuda-create-ethernet-map-wormhole
      - build/bin/debuda-server-standalone
      - build/bin/net2pipe
      - build/test/verif/op_tests/test_op
      - build/lib/libtt.so
      - build/lib/libdevice.so
      - build/lib/tt_dbd_pybind.so
      - build/lib/tt_dbd_pybind_unit_tests.so
      - build/src/**/*
      - dbd/**/*
      - device/*.yaml
      - hlks/**/*
      - infra/**/*
      - src/**/*
      - third_party/tt_llk_grayskull/**/*
      - third_party/tt_llk_wormhole_b0/**/*
      - third_party/sfpi/**/*
      - umd/device/bin/silicon/x86/create-ethernet-map
      - verif/op_tests/netlists/netlist_matmul_op_with_fd.yaml

debuda-lint:
  extends: .debuda-base
  stage: lint
  tags:
    - 8-core
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Linting debuda"

debuda-build-wheel:
  extends: .debuda-with-git
  timeout: 30m
  stage: build
  tags:
    - 8-core
  needs:
    - debuda-lint
  variables:
    ARCH_NAME: grayskull # TODO Remove this
  script:
    ### Install python packages
    - pip3 install --upgrade pip
    - pip3 install --upgrade build
    - pip3 install --upgrade setuptools
    - pip3 install wheel
    ### Make wheel
    - make dbd/wheel_release
  artifacts:
    when: always
    paths:
      - build/debuda_wheel/*.whl

debuda-unit-tests-agnostic:
  extends: .debuda-with-git
  timeout: 30m
  stage: unit_tests
  tags:
    - 8-core
  needs:
    - debuda-lint
  script:
    ### Install missing python modules
    - pip install -r dbd/requirements.txt
    ### Build tests
    - make -j$(nproc) dbd/server/unit_tests dbd/pybind dbd/pybind/unit_tests SKIP_UNIT_TESTS_RUN=1
    ### Run tests
    - $UNIT_TESTS_BUILD_DIR/dbd/server/bin/debuda_server_unit_tests --gtest_output="xml:$TEST_RESULTS_DIR/debuda_server_unit_tests.xml"
  artifacts:
    when: always
    reports:
      junit:
        - $TEST_RESULTS_DIR/*.xml


# ----------------------------------------------------------------------------------------------
#
#                                          GRAYSKULL
#
# ----------------------------------------------------------------------------------------------

.debuda-grayskull:
  tags:
    - e150
    - push
  script:
    ### Warm reset card
    - /home/software/syseng/gs/tt-smi -tr 0

debuda-build-tests-grayskull:
  extends: .debuda-build-tests-base
  variables:
    ARCH_NAME: grayskull

debuda-wheel-test-grayskull:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-grayskull, tags]
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run wheel test
    - !reference [.debuda-wheel-test, script]

debuda-wheel-test-with-test-run-grayskull:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-grayskull, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-grayskull
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: grayskull
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --test --commands "$COMPLEX_DEBUDA_COMMANDS" debuda_test

debuda-wheel-test-with-test-run-pybind-grayskull:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-grayskull, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-grayskull
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: grayskull
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --local --test --commands "$COMPLEX_NO_TILE_DEBUDA_COMMANDS" debuda_test

debuda-wheel-test-with-test-run-default-grayskull:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-grayskull, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-grayskull
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: grayskull
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --test --commands "$COMPLEX_DEBUDA_COMMANDS"

debuda-smoke-test-grayskull:
  extends: .debuda-wheel-test
  timeout: 5m
  stage: unit_tests
  tags: !reference [.debuda-grayskull, tags]
  needs:
    - debuda-build-tests-grayskull
  variables:
    ARCH_NAME: grayskull
  before_script:
    ### Do nothing
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run test
    - ./dbd/test/test-debuda-py.sh skip-build

debuda-unit-tests-grayskull:
  extends: .debuda-wheel-test
  timeout: 5m
  stage: unit_tests
  tags: !reference [.debuda-grayskull, tags]
  needs:
    - debuda-build-tests-grayskull
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: grayskull
  before_script:
    ### Set PYTHONPATH to find debuda bindings
    - export PYTHONPATH=$PYTHONPATH:build/lib
  script:
    ### Initialize grayskull
    - !reference [.debuda-grayskull, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Install missing python modules
    - pip install -r dbd/test_requirements.txt
    - pip install -r dbd/requirements.txt
    ### Run unit tests
    - coverage run --branch --include=dbd/** -m pytest dbd/ --junitxml=$TEST_RESULTS_DIR/debuda_tests_grayskull.xml
    ### Generage coverage report
    - coverage xml -o debuda_coverage_grayskull.xml
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    reports:
      junit:
        - $TEST_RESULTS_DIR/*.xml
      coverage_report:
        coverage_format: cobertura
        path: debuda_coverage_grayskull.xml


# ----------------------------------------------------------------------------------------------
#
#                                          WORMHOLE
#
# ----------------------------------------------------------------------------------------------

.debuda-wormhole-b0:
  tags:
    - n150
    - push
  script:
    ### Warm reset card
    - /home/software/syseng/wh/tt-smi -lr all wait -er

debuda-build-tests-wormhole-b0:
  extends: .debuda-build-tests-base
  variables:
    ARCH_NAME: wormhole_b0

debuda-wheel-test-wormhole-b0:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-wormhole-b0, tags]
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run wheel test
    - !reference [.debuda-wheel-test, script]

debuda-wheel-test-with-test-run-wormhole-b0:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-wormhole-b0, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-wormhole-b0
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: wormhole_b0
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --test --commands "$COMPLEX_DEBUDA_COMMANDS" debuda_test

debuda-wheel-test-with-test-run-pybind-wormhole-b0:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-wormhole-b0, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-wormhole-b0
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: wormhole_b0
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --local --test --commands "$COMPLEX_NO_TILE_DEBUDA_COMMANDS" debuda_test

debuda-wheel-test-with-test-run-default-wormhole-b0:
  extends: .debuda-wheel-test
  tags: !reference [.debuda-wormhole-b0, tags]
  needs:
    - debuda-build-wheel
    - debuda-build-tests-wormhole-b0
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: wormhole_b0
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Clean up everything so we don't have references to the build directory
    - rm -rf build
    ### Run some debuda commands
    - debuda --test --commands "$COMPLEX_DEBUDA_COMMANDS"

debuda-smoke-test-wormhole-b0:
  extends: .debuda-wheel-test
  timeout: 5m
  stage: unit_tests
  tags: !reference [.debuda-wormhole-b0, tags]
  needs:
    - debuda-build-tests-wormhole-b0
  variables:
    ARCH_NAME: wormhole_b0
  before_script:
    ### Do nothing
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run test
    - ./dbd/test/test-debuda-py.sh

debuda-unit-tests-wormhole-b0:
  extends: .debuda-wheel-test
  timeout: 5m
  stage: unit_tests
  tags: !reference [.debuda-wormhole-b0, tags]
  needs:
    - debuda-build-tests-wormhole-b0
  variables:
    TEST_RUN_TIMEOUT: 5
    NETLIST_FILE: dbd/test/netlists/netlist_multi_matmul_perf.yaml
    ARCH_NAME: wormhole_b0
  before_script:
  ### Set PYTHONPATH to find debuda bindings
    - export PYTHONPATH=$PYTHONPATH:build/lib
  script:
    ### Initialize wormhole-b0
    - !reference [.debuda-wormhole-b0, script]
    ### Run sample test on card
    - ./build/test/verif/op_tests/test_op --outdir debuda_test --netlist $NETLIST_FILE --seed 0 --silicon --timeout $TEST_RUN_TIMEOUT
    ### Install missing python modules
    - pip install -r dbd/test_requirements.txt
    - pip install -r dbd/requirements.txt
    ### Run unit tests
    - coverage run --branch --include=dbd/** -m pytest dbd/ --junitxml=$TEST_RESULTS_DIR/debuda_tests_wormhole_b0.xml
    ### Generage coverage report
    - coverage xml -o debuda_coverage_wormhole_b0.xml
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    reports:
      junit:
        - $TEST_RESULTS_DIR/*.xml
      coverage_report:
        coverage_format: cobertura
        path: debuda_coverage_wormhole_b0.xml
